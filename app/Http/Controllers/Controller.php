<?php

namespace App\Http\Controllers;

use App\Http\Services\onlineAppo\zoomAppo;
use App\Http\Services\smsGateways\Victorylink;
use App\Models\Branch\Appointment;
use App\Models\Branch\Branch;
use App\Models\Branch\Complaint;
use App\Models\Branch\Inventory\Inventory_item;
use App\Models\Branch\Inventory\Inventory_item_record;
use App\Models\Branch\Lab;
use App\Models\Branch\Operation;
use App\Models\Invoice\Invoice;
use App\Models\Invoice\Invoice_item;
use App\Models\Patient\Disease;
use App\Models\Patient\Disease_draw;
use App\Models\Patient\Medicine;
use App\Models\Patient\Patient;
use App\Models\Patient\Service_item;
use App\Models\Patient\Session_pat;
use App\Models\Patient\Specialty_cat;
use App\Models\Patient\Treatment;
use App\Models\School\Meetings\Committees_and_teams;

use App\Models\User;
use DateTime;
use Illuminate\Foundation\Auth\Access\AuthorizesRequests;
use Illuminate\Foundation\Bus\DispatchesJobs;
use Illuminate\Foundation\Validation\ValidatesRequests;
use Illuminate\Routing\Controller as BaseController;
use Illuminate\Support\Facades\App;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use SimpleSoftwareIO\QrCode\Facades\QrCode;
use Spatie\Permission\Models\Permission;
use Spatie\Permission\Models\Role;
use Dompdf\Dompdf;
use PDF;
use BaconQrCode\Renderer\ImageRenderer;
use BaconQrCode\Renderer\Image\SvgImageBackEnd;
use BaconQrCode\Renderer\RendererStyle\RendererStyle;
use BaconQrCode\Writer;
use Carbon\Carbon;
use Illuminate\Http\Response;
use Illuminate\Support\Facades\Redirect;
use Mpdf\Mpdf;
use Illuminate\Support\Collection;
use MacsiDigital\Zoom\Facades\Zoom;
use PHPUnit\TextUI\XmlConfiguration\Group;
use SoapClient;
use Analytics;
use App\Http\Services\airlineAPI\Amadeus;
use App\Http\Services\hotelAPI\Hotelbeds;
use App\Http\Services\smsGateways\Whysms;
use App\Mail\Booking_mail;
use App\Models\Branch\Airline_ticket;
use App\Models\Branch\Booking;
use App\Models\Branch\Unit_booking;
use App\Models\Branch\Unit_booking_room;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Session;
use Spatie\Analytics\Period;
use TempMail;
use DNS1D;
use DNS2D;
use Illuminate\Support\Facades\Artisan;
use Illuminate\Support\Facades\Mail;

class Controller extends BaseController
{
    use AuthorizesRequests, DispatchesJobs, ValidatesRequests;

    /**
     * Created by: Antesko <https://github.com/antesko>
     * Date: 21.6.2016.
     */

    /**
     * HELPER FUNCTIONS
     */

    /**
     * Generates random string
     * @param int $length
     * @return string
     */


    public function test()
    {

        $booking = Invoice::find(79);

        return view('mails.invoice_test', compact('booking'));

        $booking = Booking::find($id);

        //email send
        $details = [
            'subject' => "Booking Confirmation - Shady Hesham",
            'name' => "shady hesham",
            'booking' => $booking,
        ];

        $mail = Mail::to("shadyozq9@gmail.com")->send(new Booking_mail($details));
        return $mail;

        $clearcache = Artisan::call('cache:clear');


        echo DNS1D::getBarcodeSVG('444564562122256', 'C39', 1, 70);
        return "return";

        return Session::get('cart');;

        return Session::forget('cart');

        // Get the last order id
        $lastorderId = "1000000"; //999999 //000002

        // Get last 3 digits of last order id
        $lastIncreament = substr($lastorderId, -6);

        // $newOrderId2 = sprintf("%03d", $lastorderId);


        // Make a new order id with appending last increment + 1
        $newOrderId = 'TXT-' . str_pad(intval($lastorderId) + 1, strlen($lastorderId), '0', STR_PAD_LEFT);
        // 000010


        return $newOrderId;

        app(Hotelbeds::class)->acc_auth();

        $apiKey = "4e60b878b1fb4dc10f453884e102413c";
        $secret = "84dc9fafc2";

        // Signature is generated by SHA256 (Api-Key + Shared Secret + Timestamp (in seconds))
        $signature = hash("sha256", $apiKey . $secret . time());


        $client = new \GuzzleHttp\Client();

        $headers = [
            'Content-Type' => 'application/json',
            'Accept' => 'application/json',
            'Accept-Encoding' => "gzip",
            'Api-key' => $apiKey,
            'X-Signature' => $signature,
        ];
        $auth = [
            'Api-key' => $apiKey,
            'X-Signature' => $signature,
        ];
        $apiURL = 'https://api.test.hotelbeds.com/hotel-api/1/hotels';

        $res = $client->request('POST', $apiURL, [
            'auth' => [
                $apiKey,
                $signature,
            ],
            'headers' => $headers,
            'json' => [
                "stay" => [
                    "checkIn" => "2023/03/26",
                    "checkOut" => "2023/03/29",
                ],
                "stay" => [
                    "checkIn" => "2023/03/26",
                    "checkOut" => "2023/03/29",
                ]
            ],
        ]);

        $statusCode = $res->getStatusCode();
        $responseBody = json_decode($res->getBody(), true);

        return $responseBody;


        return $access;



        $date = "2023-03-22";


        // $today_other_bookings = Unit_booking::select('id')
        //     ->where('start_at', '<=', $date)
        //     ->where('end_at', '>', $date)
        //     ->where('offer_price_room_id', 130)
        //     ->get();

        // return $today_other_bookings;

        // $today_other_bookings = $today_other_bookings->sum('sums');
        // return $today_other_bookings->sum('rooms_sum_quantity');

        // $tempMail = new TempMail();

        // $tempMail = new TempMail('jwwqwaaaaaaeeqqe', '@leqweqweqweqweqweeching.net');
        // $domainsList = getDomains();
        // $address = $tempMail->address;
        // $emails = $tempMail->getEmails();
        // return $emails;


        // return checkSlot_monthly('2023-01-29', 1, 1, 1);
        // Session::forget('cart');

        // return session()->get('cart');

        // $creator_branch_id = Auth::user()->branch_id;

        // // return $creator_branch_id;


        $sms_mesg_cont = "شكرا لاختيارك د/سمير غرابة تم حجز موعد باسم عبد السلام يوم الاثنين ١٥ /١٠";
        //$asdsad =  app(Victorylink::class)->sendSms('01156773498', $sms_mesg_cont, 'ar');



        //return $asdsad;
        // Make Post Fields Array

        // $response = Http::withHeaders([
        //     'content-type' => 'application/x-www-form-urlencoded'
        // ])->post('https://test.api.amadeus.com/v1/security/oauth2/token', [
        //     'grant_type' => 'client_credentials',
        //     'client_id' => 'YRGbbBMLJyLIYEUt24SGGUH5uA9bAfqz',
        //     'client_secret' => '0mFA7OdzTrOUGzR6'
        // ]);

        // dd($response->json());

        //send o2 application
        $auth = Http::asForm()->post('https://test.api.amadeus.com/v1/security/oauth2/token', [
            'grant_type' => 'client_credentials',
            'client_id' => 'oWqFng58DtiERIJ1ClEWTFQFtPg74Kqg',
            'client_secret' => 'XGwnV7bMWYPpZ6QH'
        ]);
        $acess_token = $auth['access_token'];


        // dd($auth->json());


        //for listing
        $requried_data = [
            'origin' => 'MAD',
            'maxPrice' => '400',
        ];

        $headers = [
            'Content-Type' => 'application/json',
            'Accept' => 'application/json',
            'Authorization' => 'Bearer ' . $acess_token,
        ];

        $apiURL = 'https://test.api.amadeus.com/v2/shopping/flight-offers';
        // $apiURL = 'https://test.api.amadeus.com/v1/reference-data/locations/hotels/by-city';
        // $apiURL = 'https://test.api.amadeus.com/v1/shopping/flight-destinations';

        // $apiURL = 'https://test.api.amadeus.com/v3/shopping/hotel-offers?hotelIds=MCLONGHM';

        // $client = new \GuzzleHttp\Client([
        //     'headers' => $headers]
        // );

        $client = new \GuzzleHttp\Client();

        // $res = $client->request('GET', $apiURL, [
        //     'headers' => $headers,
        //     'query' => [
        //         'origin' => 'MAD',
        //         'maxPrice' => 200
        //     ],
        // ]);

        $res = $client->request('POST', $apiURL, [
            'headers' => $headers,
            'json' => [
                "currencyCode" => "EGP",
                "originDestinations" => [
                    [
                        "id" => "1",
                        "originLocationCode" => "CAI",
                        "destinationLocationCode" => "AUH",
                        "departureDateTimeRange" => [
                            "date" => "2023-03-25",
                            // "time" => "10:00:00"
                        ],
                        "returnDate" => [
                            "date" => "2023-03-27",
                            // "time" => "10:00:00"
                        ]
                    ]
                ],
                "travelers" => [
                    [
                        "id" => "1",
                        "travelerType" => "ADULT"
                    ]
                ],
                "sources" => [
                    "GDS"
                ],
                "searchCriteria" => [
                    "maxFlightOffers" => 10,
                    "flightFilters" => [
                        "cabinRestrictions" => [
                            [
                                "cabin" => "ECONOMY",
                                "coverage" => "MOST_SEGMENTS",
                                "originDestinationIds" => [
                                    "1"
                                ]
                            ]
                        ]
                    ]
                ]
            ],
        ]);
        $statusCode = $res->getStatusCode();
        $responseBody = json_decode($res->getBody(), true);


        // //for listing hotels
        // $requried_data = [
        //     "currency" => 'cairo',
        //     "locale" => 'en_US',
        //     "sender_id" => 1033,
        //     "siteid" => 300000001, //comes from search query
        //     "currency" => "USD",
        //     "eapid" => 1,
        //     "destination" => [
        //         // "regionId" => "1033"
        //         "regionId" => "767"

        //     ],
        //     "checkInDate" => [
        //         "day" => 10,
        //         "month" => 10,
        //         "year" => 2022
        //     ],
        //     "checkOutDate" => [
        //         "day" => 15,
        //         "month" => 10,
        //         "year" => 2022
        //     ],
        //     "rooms" => [
        //         [
        //             "adults" => 2,
        //             "children" => [
        //                 [
        //                     "age" => 5
        //                 ],
        //                 [
        //                     "age" => 7
        //                 ]
        //             ]
        //         ]
        //     ],
        //     "resultsStartingIndex" => 0,
        //     "resultsSize" => 200,
        //     "sort" => "PRICE_LOW_TO_HIGH",
        //     "filters" => [
        //         "price" => [
        //             "max" => 150,
        //             "min" => 100
        //         ]
        //     ]
        // ];

        // $headers = [
        //     'Content-Type' => 'application/json',
        //     'Accept' => 'application/json',
        //     'CURLOPT_RETURNTRANSFER' => true,
        //     'CURLOPT_FOLLOWLOCATION' => true,
        //     'CURLOPT_ENCODING' => "",
        //     'CURLOPT_MAXREDIRS' => 10,
        //     'CURLOPT_TIMEOUT' => 30,
        //     'CURLOPT_HTTP_VERSION' => 'CURL_HTTP_VERSION_1_1',
        //     'CURLOPT_CUSTOMREQUEST' => "GET",
        //     'X-RapidAPI-Host' => 'hotels4.p.rapidapi.com',
        //     'X-RapidAPI-Key' => '1c06ee929amsh1d2e3d73d3976cap1fbb58jsnc016bf51a014'
        // ];

        // $apiURL = 'https://bulk.whysms.com/api/v3/sms/send';


        // // $client = new \GuzzleHttp\Client([
        // //     'headers' => $headers]
        // // );

        // $client = new \GuzzleHttp\Client();

        // $res = $client->request('POST', 'https://hotels4.p.rapidapi.com/properties/v2/list', [
        //     'headers' => $headers,
        //     'json' => $requried_data,
        // ]);

        // $statusCode = $res->getStatusCode();
        // $responseBody = json_decode($res->getBody(), true);

        // dd($responseBody);


        // $requried_data = [
        //     "recipient" => '201114847444',
        //     "sender_id" => 'Dr Tharwat',
        //     "type" => 'plain',
        //     "message" => 'Hello Doctor Tharwat, It is me Medix'
        // ];

        // $headers = [
        //     'Content-Type' => 'application/json',
        //     'Accept' => 'application/json',
        //     'Authorization' => 'Bearer 27|g3RYMJtsFdffdL2314ptiNgCl7T3SgUgx4lDTGa5',
        // ];

        // $apiURL = 'https://bulk.whysms.com/api/v3/sms/send';


        // // $client = new \GuzzleHttp\Client([
        // //     'headers' => $headers]
        // // );

        // $client = new \GuzzleHttp\Client();

        // $res = $client->request('POST', 'https://bulk.whysms.com/api/v3/sms/send', [
        //     'headers' => $headers,
        //     'json' => $requried_data,
        // ]);

        // $statusCode = $res->getStatusCode();
        // $responseBody = json_decode($res->getBody(), true);

        // dd($responseBody);


        // $php_curl = curl_init();

        // curl_setopt_array($php_curl, array(
        //     CURLOPT_URL => "https://bulk.whysms.com/api/v3/sms/send",
        //     CURLOPT_RETURNTRANSFER => true,
        //     CURLOPT_ENCODING => "",
        //     CURLOPT_MAXREDIRS => 10,
        //     CURLOPT_TIMEOUT => 30000,
        //     CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
        //     CURLOPT_CUSTOMREQUEST => "POST",
        //     CURLOPT_HTTPHEADER => array(
        //       // Set POST here requred headers
        //         "Authorization: Bearer 15|zbEjZiU9QfYxL9UKm3LmfPH8zJvhpxn8pJTWQRkN",
        //         "Content-Type: application/json",
        //         "Accept: application/json",
        //         //"accept-language: en-US,en;q=0.8",
        //     ),
        //     CURLOPT_POSTFIELDS => json_encode($requried_data),
        // ));

        // $final_results = curl_exec($php_curl);
        // $err = curl_error($php_curl);

        // curl_close($php_curl);

        // if ($err) {
        //     echo "Laravel cURL Error #:" . $err;
        // } else {
        //     print_r(json_decode($final_results));
        // };







    }
    public function addCommiteAndTeamsMainRecords($schoolId,$managerId)
    {
        // Check if there are already any rows for this school in Committees_and_teams
        $existingRows = Committees_and_teams::where('school_id', $schoolId)->count();

        // If there are no existing rows, insert new ones
        if ($existingRows === 0) {

            $rows =
                [
                    [
                        'author' => $managerId,
                        'school_id' => $schoolId,
                        'title' => 'الجنة الادارية',
                        'classification' => 1,
                    ],
                    [
                        'author' => $managerId,
                        'school_id' => $schoolId,
                        'title' => 'لجنة التوجيه والارشاد',
                        'classification' => 1,
                    ],
                    [
                        'author' => $managerId,
                        'school_id' => $schoolId,
                        'title' => 'لجنة التحصيل الدراسي',
                        'classification' => 1,
                    ],
                    [
                        'author' => $managerId,
                        'school_id' => $schoolId,
                        'title' => 'لجنة التمييز',
                        'classification' => 1,
                    ],
                    [
                        'author' => $managerId,
                        'school_id' => $schoolId,
                        'title' => 'فريق الصندوق المدرسي',
                        'classification' => 2,
                    ],
                    [
                        'author' => $managerId,
                        'school_id' => $schoolId,
                        'title' => 'فريق عمل الأمن والسلامه المدرسية',
                        'classification' => 2,
                    ],
                    [
                        'author' => $managerId,
                        'school_id' => $schoolId,
                        'title' => 'فريق عمل التربيه الخاصة',
                        'classification' => 2,
                    ]
                ];
            Committees_and_teams::insert($rows);
        }

    }




    public function getIp()
    {
        foreach (array('HTTP_CLIENT_IP', 'HTTP_X_FORWARDED_FOR', 'HTTP_X_FORWARDED', 'HTTP_X_CLUSTER_CLIENT_IP', 'HTTP_FORWARDED_FOR', 'HTTP_FORWARDED', 'REMOTE_ADDR') as $key) {
            if (array_key_exists($key, $_SERVER) === true) {
                foreach (explode(',', $_SERVER[$key]) as $ip) {
                    $ip = trim($ip); // just to be safe
                    if (filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_NO_PRIV_RANGE | FILTER_FLAG_NO_RES_RANGE) !== false) {
                        return $ip;
                    }
                }
            }
        }
        return request()->ip(); // it will return server ip when no client ip found
    }

    public function geoLocate($address)
    {
        $lat = 0;
        $lng = 0;

        $data_location = "https://maps.google.com/maps/api/geocode/json?key=&address=" . str_replace(" ", "+", $address) . "&sensor=false";
        $data = file_get_contents($data_location);
        usleep(200000);
        // turn this on to see if we are being blocked
        // echo $data;
        $data = json_decode($data);
        if ($data->status == "OK") {
            $lat = $data->results[0]->geometry->location->lat;
            $lng = $data->results[0]->geometry->location->lng;

            if ($lat && $lng) {
                return array(
                    'status' => true,
                    'lat' => $lat,
                    'long' => $lng,
                    'google_place_id' => $data->results[0]->place_id
                );
            }
        }
        if ($data->status == 'OVER_QUERY_LIMIT') {
            return array(
                'status' => false,
                'message' => 'Google Amp API OVER_QUERY_LIMIT, Please update your google map api key or try tomorrow'
            );
        }

        return array('lat' => null, 'long' => null, 'status' => false);
    }
}
